// vite.config.js
import { fileURLToPath, URL } from "node:url";
import { defineConfig } from "file:///Volumes/Other/Downloads/%E5%88%87%E7%89%88%E5%96%AE%E4%BA%BA%E5%B0%88%E9%A1%8C/node_modules/vite/dist/node/index.js";
import vue from "file:///Volumes/Other/Downloads/%E5%88%87%E7%89%88%E5%96%AE%E4%BA%BA%E5%B0%88%E9%A1%8C/node_modules/@vitejs/plugin-vue/dist/index.mjs";
import eslintPlugin from "file:///Volumes/Other/Downloads/%E5%88%87%E7%89%88%E5%96%AE%E4%BA%BA%E5%B0%88%E9%A1%8C/node_modules/vite-plugin-eslint/dist/index.mjs";

// loadEnv.js
import dotenv from "file:///Volumes/Other/Downloads/%E5%88%87%E7%89%88%E5%96%AE%E4%BA%BA%E5%B0%88%E9%A1%8C/node_modules/dotenv/lib/main.js";
import path from "path";
import fs from "fs";
var getCurrentTimeString = () => {
  const now = /* @__PURE__ */ new Date();
  let hours = now.getHours();
  const minutes = String(now.getMinutes()).padStart(2, "0");
  const seconds = String(now.getSeconds()).padStart(2, "0");
  const ampm = hours >= 12 ? "\u4E0B\u5348" : "\u4E0A\u5348";
  hours %= 12;
  hours = hours || 12;
  const hoursStr = String(hours).padStart(2, "0");
  return `${ampm}${hoursStr}:${minutes}:${seconds}`;
};
var customLog = (tag, message, tagColor = "\x1B[36m", messageColor = "\x1B[32m") => {
  const timeString = getCurrentTimeString();
  console.log(`\x1B[90m%s\x1B[0m ${tagColor}\x1B[1m%s\x1B[0m ${messageColor}%s\x1B[0m`, timeString, `[${tag}]`, message);
};
var loadEnv_default = (mode) => {
  const basePath = path.resolve(process.cwd(), ".env");
  const envPath = `${basePath}.${mode}`;
  const finalPath = fs.existsSync(envPath) ? envPath : basePath;
  const envConfig = dotenv.config({ path: finalPath });
  if (envConfig.error) {
    customLog("vite", "\u7121\u6CD5\u8B80\u53D6\u5230\u74B0\u5883\u8B8A\u6578(Environment Variables)\u6A94\u6848\u3002");
    customLog("vite", "\u8ACB\u5728\u7D42\u7AEF\u6A5F\u8F38\u5165\u300Ccp .env.example .env\u300D \u5EFA\u7ACB\u74B0\u5883\u8B8A\u6578\u6A94\u6848\u3002");
    customLog("vite", "\u76EE\u524D\u50C5\u652F\u63F4 .env\u3001.env.development\u3001.env.production \u4E09\u7A2E\u6A21\u5F0F\u3002");
  }
};

// vite.config.js
var __vite_injected_original_import_meta_url = "file:///Volumes/Other/Downloads/%E5%88%87%E7%89%88%E5%96%AE%E4%BA%BA%E5%B0%88%E9%A1%8C/vite.config.js";
var INVALID_CHAR_REGEX = /[\x00-\x1F\x7F<>*#"{}|^[\]`;?:&=+$,]/g;
var DRIVE_LETTER_REGEX = /^[a-z]:/i;
var vite_config_default = defineConfig(({ mode }) => {
  loadEnv_default(mode);
  return {
    base: process.env.NODE_ENV === "production" ? `/${process.env.REPOSITORY_NAME}/` : "/",
    plugins: [
      vue(),
      eslintPlugin({
        include: ["src/**/*.js", "src/**/*.vue", "src/*.js", "src/*.vue"]
      })
    ],
    resolve: {
      alias: {
        "@": fileURLToPath(new URL("./src", __vite_injected_original_import_meta_url))
      }
    },
    build: {
      rollupOptions: {
        output: {
          // https://github.com/rollup/rollup/blob/master/src/utils/sanitizeFileName.ts
          sanitizeFileName(name) {
            const match = DRIVE_LETTER_REGEX.exec(name);
            const driveLetter = match ? match[0] : "";
            return driveLetter + name.slice(driveLetter.length).replace(INVALID_CHAR_REGEX, "");
          }
        }
      }
    }
  };
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcuanMiLCAibG9hZEVudi5qcyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiY29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2Rpcm5hbWUgPSBcIi9Wb2x1bWVzL090aGVyL0Rvd25sb2Fkcy9cdTUyMDdcdTcyNDhcdTU1QUVcdTRFQkFcdTVDMDhcdTk4NENcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZmlsZW5hbWUgPSBcIi9Wb2x1bWVzL090aGVyL0Rvd25sb2Fkcy9cdTUyMDdcdTcyNDhcdTU1QUVcdTRFQkFcdTVDMDhcdTk4NEMvdml0ZS5jb25maWcuanNcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfaW1wb3J0X21ldGFfdXJsID0gXCJmaWxlOi8vL1ZvbHVtZXMvT3RoZXIvRG93bmxvYWRzLyVFNSU4OCU4NyVFNyU4OSU4OCVFNSU5NiVBRSVFNCVCQSVCQSVFNSVCMCU4OCVFOSVBMSU4Qy92aXRlLmNvbmZpZy5qc1wiO2ltcG9ydCB7IGZpbGVVUkxUb1BhdGgsIFVSTCB9IGZyb20gJ25vZGU6dXJsJztcblxuaW1wb3J0IHsgZGVmaW5lQ29uZmlnIH0gZnJvbSAndml0ZSc7XG5pbXBvcnQgdnVlIGZyb20gJ0B2aXRlanMvcGx1Z2luLXZ1ZSc7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tZXh0cmFuZW91cy1kZXBlbmRlbmNpZXNcbmltcG9ydCBlc2xpbnRQbHVnaW4gZnJvbSAndml0ZS1wbHVnaW4tZXNsaW50JztcbmltcG9ydCBsb2FkRW52IGZyb20gJy4vbG9hZEVudic7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250cm9sLXJlZ2V4XG5jb25zdCBJTlZBTElEX0NIQVJfUkVHRVggPSAvW1xceDAwLVxceDFGXFx4N0Y8PiojXCJ7fXxeW1xcXWA7PzomPSskLF0vZztcbmNvbnN0IERSSVZFX0xFVFRFUl9SRUdFWCA9IC9eW2Etel06L2k7XG5cbi8vIGh0dHBzOi8vdml0ZWpzLmRldi9jb25maWcvXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb25maWcoKHsgbW9kZSB9KSA9PiB7XG4gIGxvYWRFbnYobW9kZSk7XG4gIHJldHVybiAoe1xuICAgIGJhc2U6IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicgPyBgLyR7cHJvY2Vzcy5lbnYuUkVQT1NJVE9SWV9OQU1FfS9gIDogJy8nLFxuICAgIHBsdWdpbnM6IFtcbiAgICAgIHZ1ZSgpLFxuICAgICAgZXNsaW50UGx1Z2luKHtcbiAgICAgICAgaW5jbHVkZTogWydzcmMvKiovKi5qcycsICdzcmMvKiovKi52dWUnLCAnc3JjLyouanMnLCAnc3JjLyoudnVlJ10sXG4gICAgICB9KSxcbiAgICBdLFxuICAgIHJlc29sdmU6IHtcbiAgICAgIGFsaWFzOiB7XG4gICAgICAgICdAJzogZmlsZVVSTFRvUGF0aChuZXcgVVJMKCcuL3NyYycsIGltcG9ydC5tZXRhLnVybCkpLFxuICAgICAgfSxcbiAgICB9LFxuICAgIGJ1aWxkOiB7XG4gICAgICByb2xsdXBPcHRpb25zOiB7XG4gICAgICAgIG91dHB1dDoge1xuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vcm9sbHVwL3JvbGx1cC9ibG9iL21hc3Rlci9zcmMvdXRpbHMvc2FuaXRpemVGaWxlTmFtZS50c1xuICAgICAgICAgIHNhbml0aXplRmlsZU5hbWUobmFtZSkge1xuICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSBEUklWRV9MRVRURVJfUkVHRVguZXhlYyhuYW1lKTtcbiAgICAgICAgICAgIGNvbnN0IGRyaXZlTGV0dGVyID0gbWF0Y2ggPyBtYXRjaFswXSA6ICcnO1xuICAgICAgICAgICAgLy8gc3Vic3RyIFx1NjYyRlx1ODhBQlx1NkREOFx1NkM3MFx1OEE5RVx1NkNENVx1RkYwQ1x1NTZFMFx1NkI2NFx1ODk4MVx1NjUzOSBzbGljZVxuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgZHJpdmVMZXR0ZXJcbiAgICAgICAgICAgICsgbmFtZS5zbGljZShkcml2ZUxldHRlci5sZW5ndGgpLnJlcGxhY2UoSU5WQUxJRF9DSEFSX1JFR0VYLCAnJylcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSxcbiAgfSk7XG59KTtcbiIsICJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiL1ZvbHVtZXMvT3RoZXIvRG93bmxvYWRzL1x1NTIwN1x1NzI0OFx1NTVBRVx1NEVCQVx1NUMwOFx1OTg0Q1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9maWxlbmFtZSA9IFwiL1ZvbHVtZXMvT3RoZXIvRG93bmxvYWRzL1x1NTIwN1x1NzI0OFx1NTVBRVx1NEVCQVx1NUMwOFx1OTg0Qy9sb2FkRW52LmpzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9Wb2x1bWVzL090aGVyL0Rvd25sb2Fkcy8lRTUlODglODclRTclODklODglRTUlOTYlQUUlRTQlQkElQkElRTUlQjAlODglRTklQTElOEMvbG9hZEVudi5qc1wiO2ltcG9ydCBkb3RlbnYgZnJvbSAnZG90ZW52JztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IGZzIGZyb20gJ2ZzJztcblxuY29uc3QgZ2V0Q3VycmVudFRpbWVTdHJpbmcgPSAoKSA9PiB7XG4gIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XG4gIGxldCBob3VycyA9IG5vdy5nZXRIb3VycygpO1xuICBjb25zdCBtaW51dGVzID0gU3RyaW5nKG5vdy5nZXRNaW51dGVzKCkpLnBhZFN0YXJ0KDIsICcwJyk7XG4gIGNvbnN0IHNlY29uZHMgPSBTdHJpbmcobm93LmdldFNlY29uZHMoKSkucGFkU3RhcnQoMiwgJzAnKTtcbiAgY29uc3QgYW1wbSA9IGhvdXJzID49IDEyID8gJ1x1NEUwQlx1NTM0OCcgOiAnXHU0RTBBXHU1MzQ4JztcbiAgaG91cnMgJT0gMTI7XG4gIGhvdXJzID0gaG91cnMgfHwgMTI7XG4gIGNvbnN0IGhvdXJzU3RyID0gU3RyaW5nKGhvdXJzKS5wYWRTdGFydCgyLCAnMCcpO1xuICByZXR1cm4gYCR7YW1wbX0ke2hvdXJzU3RyfToke21pbnV0ZXN9OiR7c2Vjb25kc31gO1xufTtcblxuY29uc3QgY3VzdG9tTG9nID0gKHRhZywgbWVzc2FnZSwgdGFnQ29sb3IgPSAnXFx4MWJbMzZtJywgbWVzc2FnZUNvbG9yID0gJ1xceDFiWzMybScpID0+IHtcbiAgY29uc3QgdGltZVN0cmluZyA9IGdldEN1cnJlbnRUaW1lU3RyaW5nKCk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gIGNvbnNvbGUubG9nKGBcXHgxYls5MG0lc1xceDFiWzBtICR7dGFnQ29sb3J9XFx4MWJbMW0lc1xceDFiWzBtICR7bWVzc2FnZUNvbG9yfSVzXFx4MWJbMG1gLCB0aW1lU3RyaW5nLCBgWyR7dGFnfV1gLCBtZXNzYWdlKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IChtb2RlKSA9PiB7XG4gIGNvbnN0IGJhc2VQYXRoID0gcGF0aC5yZXNvbHZlKHByb2Nlc3MuY3dkKCksICcuZW52Jyk7XG4gIGNvbnN0IGVudlBhdGggPSBgJHtiYXNlUGF0aH0uJHttb2RlfWA7XG4gIGNvbnN0IGZpbmFsUGF0aCA9IGZzLmV4aXN0c1N5bmMoZW52UGF0aCkgPyBlbnZQYXRoIDogYmFzZVBhdGg7XG5cbiAgY29uc3QgZW52Q29uZmlnID0gZG90ZW52LmNvbmZpZyh7IHBhdGg6IGZpbmFsUGF0aCB9KTtcblxuICBpZiAoZW52Q29uZmlnLmVycm9yKSB7XG4gICAgY3VzdG9tTG9nKCd2aXRlJywgJ1x1NzEyMVx1NkNENVx1OEI4MFx1NTNENlx1NTIzMFx1NzRCMFx1NTg4M1x1OEI4QVx1NjU3OChFbnZpcm9ubWVudCBWYXJpYWJsZXMpXHU2QTk0XHU2ODQ4XHUzMDAyJyk7XG4gICAgY3VzdG9tTG9nKCd2aXRlJywgJ1x1OEFDQlx1NTcyOFx1N0Q0Mlx1N0FFRlx1NkE1Rlx1OEYzOFx1NTE2NVx1MzAwQ2NwIC5lbnYuZXhhbXBsZSAuZW52XHUzMDBEIFx1NUVGQVx1N0FDQlx1NzRCMFx1NTg4M1x1OEI4QVx1NjU3OFx1NkE5NFx1Njg0OFx1MzAwMicpO1xuICAgIGN1c3RvbUxvZygndml0ZScsICdcdTc2RUVcdTUyNERcdTUwQzVcdTY1MkZcdTYzRjQgLmVudlx1MzAwMS5lbnYuZGV2ZWxvcG1lbnRcdTMwMDEuZW52LnByb2R1Y3Rpb24gXHU0RTA5XHU3QTJFXHU2QTIxXHU1RjBGXHUzMDAyJyk7XG4gIH1cbn07XG4iXSwKICAibWFwcGluZ3MiOiAiO0FBQStULFNBQVMsZUFBZSxXQUFXO0FBRWxXLFNBQVMsb0JBQW9CO0FBQzdCLE9BQU8sU0FBUztBQUdoQixPQUFPLGtCQUFrQjs7O0FDTjhSLE9BQU8sWUFBWTtBQUMxVSxPQUFPLFVBQVU7QUFDakIsT0FBTyxRQUFRO0FBRWYsSUFBTSx1QkFBdUIsTUFBTTtBQUNqQyxRQUFNLE1BQU0sb0JBQUksS0FBSztBQUNyQixNQUFJLFFBQVEsSUFBSSxTQUFTO0FBQ3pCLFFBQU0sVUFBVSxPQUFPLElBQUksV0FBVyxDQUFDLEVBQUUsU0FBUyxHQUFHLEdBQUc7QUFDeEQsUUFBTSxVQUFVLE9BQU8sSUFBSSxXQUFXLENBQUMsRUFBRSxTQUFTLEdBQUcsR0FBRztBQUN4RCxRQUFNLE9BQU8sU0FBUyxLQUFLLGlCQUFPO0FBQ2xDLFdBQVM7QUFDVCxVQUFRLFNBQVM7QUFDakIsUUFBTSxXQUFXLE9BQU8sS0FBSyxFQUFFLFNBQVMsR0FBRyxHQUFHO0FBQzlDLFNBQU8sR0FBRyxJQUFJLEdBQUcsUUFBUSxJQUFJLE9BQU8sSUFBSSxPQUFPO0FBQ2pEO0FBRUEsSUFBTSxZQUFZLENBQUMsS0FBSyxTQUFTLFdBQVcsWUFBWSxlQUFlLGVBQWU7QUFDcEYsUUFBTSxhQUFhLHFCQUFxQjtBQUV4QyxVQUFRLElBQUkscUJBQXFCLFFBQVEsb0JBQW9CLFlBQVksYUFBYSxZQUFZLElBQUksR0FBRyxLQUFLLE9BQU87QUFDdkg7QUFFQSxJQUFPLGtCQUFRLENBQUMsU0FBUztBQUN2QixRQUFNLFdBQVcsS0FBSyxRQUFRLFFBQVEsSUFBSSxHQUFHLE1BQU07QUFDbkQsUUFBTSxVQUFVLEdBQUcsUUFBUSxJQUFJLElBQUk7QUFDbkMsUUFBTSxZQUFZLEdBQUcsV0FBVyxPQUFPLElBQUksVUFBVTtBQUVyRCxRQUFNLFlBQVksT0FBTyxPQUFPLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFbkQsTUFBSSxVQUFVLE9BQU87QUFDbkIsY0FBVSxRQUFRLGlHQUFxQztBQUN2RCxjQUFVLFFBQVEsbUlBQXlDO0FBQzNELGNBQVUsUUFBUSwrR0FBbUQ7QUFBQSxFQUN2RTtBQUNGOzs7QURsQ3NLLElBQU0sMkNBQTJDO0FBVXZOLElBQU0scUJBQXFCO0FBQzNCLElBQU0scUJBQXFCO0FBRzNCLElBQU8sc0JBQVEsYUFBYSxDQUFDLEVBQUUsS0FBSyxNQUFNO0FBQ3hDLGtCQUFRLElBQUk7QUFDWixTQUFRO0FBQUEsSUFDTixNQUFNLFFBQVEsSUFBSSxhQUFhLGVBQWUsSUFBSSxRQUFRLElBQUksZUFBZSxNQUFNO0FBQUEsSUFDbkYsU0FBUztBQUFBLE1BQ1AsSUFBSTtBQUFBLE1BQ0osYUFBYTtBQUFBLFFBQ1gsU0FBUyxDQUFDLGVBQWUsZ0JBQWdCLFlBQVksV0FBVztBQUFBLE1BQ2xFLENBQUM7QUFBQSxJQUNIO0FBQUEsSUFDQSxTQUFTO0FBQUEsTUFDUCxPQUFPO0FBQUEsUUFDTCxLQUFLLGNBQWMsSUFBSSxJQUFJLFNBQVMsd0NBQWUsQ0FBQztBQUFBLE1BQ3REO0FBQUEsSUFDRjtBQUFBLElBQ0EsT0FBTztBQUFBLE1BQ0wsZUFBZTtBQUFBLFFBQ2IsUUFBUTtBQUFBO0FBQUEsVUFFTixpQkFBaUIsTUFBTTtBQUNyQixrQkFBTSxRQUFRLG1CQUFtQixLQUFLLElBQUk7QUFDMUMsa0JBQU0sY0FBYyxRQUFRLE1BQU0sQ0FBQyxJQUFJO0FBRXZDLG1CQUNFLGNBQ0EsS0FBSyxNQUFNLFlBQVksTUFBTSxFQUFFLFFBQVEsb0JBQW9CLEVBQUU7QUFBQSxVQUVqRTtBQUFBLFFBQ0Y7QUFBQSxNQUNGO0FBQUEsSUFDRjtBQUFBLEVBQ0Y7QUFDRixDQUFDOyIsCiAgIm5hbWVzIjogW10KfQo=
